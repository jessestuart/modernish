#! /usr/bin/env modernish
#! use safe -w BUG_APPENDC
#! use loop/select -w BUG_SELECTEOF
#! use sys/base/mktemp
#! use sys/base/which
#! use var/local

harden cat
harden nl
harden tee

if match $ME */*; then
	cd ${ME%/*}
fi

if not command -V time >/dev/null; then
	exit 2 "No 'time' command available!"
fi

shell=$MSH_SHELL
modernish=$(command -v modernish) || exit 2 "Can't find modernish!"

# select a shell from a menu
selectshell() {
	# Within this 'LOCAL' block: local positional parameters; local variables REPLY, PS3 and
	# all_shells; field splitting on newline (i.e. another way of declaring the local variable IFS=$CCn).
	# Field splitting on newline means that any expansions that may contain a newline must be quoted
	# (unless they are to be split, of course -- like in the 'for' and 'select' statements).
	which -as sh ash bash bosh dash yash zsh zsh5 ksh ksh93 pdksh mksh lksh oksh
	all_shells=$REPLY	# newline-separated list of shells
	# supplement 'which' results with any additional shells from /etc/shells
	if can read /etc/shells; then
		all_shells=${all_shells}${CCn}$(grep -E '/([bdy]?a|pdk|[mlo]?k|z)?sh[0-9._-]*$' /etc/shells)
	fi

	if empty $all_shells; then
		all_shells='(no shell found; enter path)'
	else
		all_shells=$(putln $all_shells | sort -u)
	fi
	LOCAL REPLY new_shell PS3='Shell number, command name or path: ' --split=$CCn -- $all_shells; BEGIN
		REPLY='' # BUG_SELECTEOF workaround (zsh)
		select new_shell in "$@"; do
			if empty $new_shell && not empty $REPLY; then
				# a path or command instead of a number was given
				checkshell $REPLY && break
			else
				# a number was chosen
				checkshell $new_shell && break
			fi
		done
		if empty $REPLY; then	# user pressed ^D
			putln 'Aborting.'
			return	# exit LOCAL
		fi
		shell=$new_shell
	END
}

# Checks for a valid shell; leaves full path in $new_shell if found ok.
checkshell() {
	LOCAL REPLY; BEGIN
		REPLY=$1
		if not contains $REPLY /; then
			which -s $REPLY  # store full path back in $REPLY
		fi
		if not is present $REPLY; then
			putln "$1 cannot be found."
			return 1
		fi
		if not can exec $REPLY; then
			putln "$REPLY is not an executable. Try another."
			return 1
		fi
		if not identic $($REPLY $MSH_PREFIX/bin/modernish -c 'putln okay') 'okay'; then
			putln "$REPLY cannot run modernish. Try another shell."
			return 1
		fi
		new_shell=$REPLY
	END >&2 || return
	putln "Shell $new_shell selected."
}

putln	'Type the number of the loop test you want to time, or type the' \
	"name of a shell to execute the tests in it (default: $MSH_SHELL)." \
	'Type "s" for a menu of shells. Type "exit" or Ctrl-D to exit.'

mktemp -sC  # silent+autocleanup; filename in REPLY
tmpscript=$REPLY

LOCAL --glob -- [0-9][0-9].*.msh; BEGIN
	REPLY=''  # BUG_SELECTEOF compat
	select script in "$@"; do
		if not empty $script; then
			putln "Code of $script:"
			putln "#! $shell" ". modernish" >| $tmpscript
			cat $script | tee -a $tmpscript | nl -b a
			putln "Timing execution of $script with $shell..."
			time $shell $tmpscript || die "couldn't execute $tmpscript"
		else
			case $REPLY in
			( exit )	exit ;;
			( 's' )		selectshell ;;
			( * )		checkshell $REPLY && shell=$new_shell ;;
			esac
		fi
	done
	if empty $REPLY; then	# user pressed ^D
		exit 0 Exiting.
	fi
END
