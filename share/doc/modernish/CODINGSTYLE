[ This document is unfinished and under development. ]

Coding standards for shell programs using modernish:

* test and [ are emphatically deprecated. Use modernish testing functions
  instead. They are hardened, more readable, more consistent, and have more
  features. Integer comparisons use POSIX arith expression, so you can do
  'eq 2+2 4' or 'eq VARNAME 4' (without the need for $ or quoting). You can
  even do arithmetic assignment: i=0; while lt i+=1 1000; do stuff; done
  In modernish, 'not' is aliased to '! ' so they are synonyms.
  _____ Test function _________ If true _______________________________________
  Integer arithmetic tests:
        let <expr> [<expr>...]  - C-style integer arithmetic tests and ops, now
                                  available even on minimal POSIX shells
	isint <value>		- is an integer number (decimal, hex., octal)
  Supplementary integer arithmetic tests from the var/arith module:
	eq <expr> <expr>	- equal
	ne <expr> <expr>	- not equal
	gt <expr> <expr>	- greater than
	ge <expr> <expr>	- greater than or equal
	lt <expr> <expr>	- less than
	le <expr> <expr>	- less than or equal
  String comparisons:
	empty [ <string> ]	- empty string, or no argument
	identic <str> <str>	- identical (use 'not identic' for not identical)
	sortsbefore <str> <str>	- string 1 lexically sorts before string 2
	sortsafter <str> <str>	- string 1 lexically sorts after string 2
	startswith <str> <str>	- string 1 starts with string 2
	endswith <str> <str>	- string 1 ends with string 2
	contains <str> <str>	- string 1 contains string 2
	match <str> <glob>	- string matches glob pattern
  File tests:
	is present <file>	- the file exists
	is nonempty <file>	- file is non-empty (works for directories!)
  File permission tests:
	can read <file>		- can read from file or directory
	can write <file>	- can write to file or directory
	can exec <file>		- can execute file
	can traverse <file>	- can traverse through directory
	is setuid <file>	- file has User ID bit set
	is setgid <file>	- file has Group UID bit set
	is mine <file>		- file belongs to my user
	is mygroup <file>	- file belongs to my group
  File type tests:
  (Note: these do *not* resolve symbolic links unless the -L option is added.)
  	is reg <file>		- the file is a regular file
  	is sym <file>		- the file is a symbolic link
  	is dir <file>		- the file is a directory
  	is fifo <file>		- the file is a named pipe (FIFO)
  	is sockset <file>	- the file is a socket
  	is blockspecial <file>	- the file is a block special device
  	is charspecial <file>	- the file is a character special device
  File descriptor tests:
  	is onterminal <descr>	- the file descriptor is open and associated
				  with a terminal
  File comparison tests:
        is newerthan <f1> <f2>   - file 1 is newer than file 2
        is olderthan <f1> <f2>   - file 1 is older than file 2
        is samefileas <f1> <f2>  - file 1 is same file as file 2 (hard links)

* Don't use set -e (-o errexit). It is not supported by modernish code and
  has too many pitfalls anyway, because it doesn't distinguish between a
  legit false/negative/nonzero result and an actual error. Instead, use
  'harden' for specific commands.

  - Don't use the -f flag with hardened 'rm' (actually, don't use it at all
    in your programs, full stop). The -f flag will cause 'rm' to ignore all
    errors and continue trying to delete things. Too many home directories and
    entire systems have been deleted because someone did 'rm -rf' with
    unvalidated parameters resulting from broken algorithms:
    http://www.techrepublic.com/article/moving-steams-local-folder-deletes-all-user-files-on-linux/
    or even just because of a simple typo:
    https://github.com/MrMEEE/bumblebee-Old-and-abbandoned/issues/123
    Not using '-f' would cause `rm` to fail properly in many cases, allowing
    'harden' to do its thing to protect you and your users.

* Do 'use safe'. This turns off field splitting (IFS='') and globbing (set -f),
  makes the use of uninitialised variabels an error (set -u) and protects
  against accidentally overwriting files through output redirection (set -C).
  (The first two of these eliminate most of the need to quote variables!)
  Then, activate field splitting and/or globbing only where they're needed,
  either within a ( subshell block ) or by using var/local.

* Don't use uninitialized variables.
  (To enforce this, the shell option -u (nounset) is enabled by 'use safe'.)

* Output redirection: Don't overwrite possibly-existing files with >; use >|
  if you legitimately expect to overwrite a file.
  ('use safe' sets -C (noclobber) to enforce this.)

* Suggested coding style:
  - Indent with a single tab. Tabs are assumed to be 8 spaces wide.
    (This gives automatic compatibility with <<-EOF here-documents.)
  - Prefer "if command1; then command2; fi"  over "command1 && command2"
    (unless you specifically want the exit status of command2).

* When implementing a shell bug or quirk workaround, either identify it
  in a comment using its modernish ID, for instance:
      [some workaround here]	# BUG_FOOBAR compat
  or, for a conditional workaround, use 'thisshellhas':
      if thisshellhas BUG_FOOBAR; then
              [code including workaround]
      else
              [regular code]
      fi
  This not only allows people reading the code to look up the bug and
  understand what's going on, but also makes it easy to remove the
  workarounds when modernish stops supporting a certain shell bug.
     In many cases, the conditional workaround method should be used.
  This is because workaround versions could trigger other bugs in other
  shells that you're not accounting for. If you're not sure, err on the
  side of implementing a conditional workaround.

* ...

Coding standards for POSIX shell programs in general:

* When unsetting a variable, always use 'unset -v varname' instead of just
  'unset varname', otherwise you might accidentally unset a shell function,
  depending on the shell.
  http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_29_04
  "If neither -f nor -v is specified, name refers to a variable; if a
  variable by that name does not exist, it is unspecified whether a function
  by that name, if any, shall be unset."

* For zsh compatibility, always use ${#} instead of $# unless it's
  completely stand-alone. (See SHELLBUGS under zsh for explanation.)

* Always double-quote expansions, unless you specifically expect a
  need for that variable to expand to multiple arguments. (This eliminates a
  good majority of shell script bugs right there!)
  Exception: this is not needed for simple assignments like X=$Y,
  although it is for readonly "X=$Y" and export "X=$Y". as those
  assignments are simple arguments in pure POSIX shells.

* Always single-quote string literals (or double-quote string literals
  containing variable references). This has two advantages:
  1. It stops typos, like an extra space, from causing major havoc.
     For instance, this trivial habit could have avoided deleting /usr
     by accident:
     https://github.com/MrMEEE/bumblebee-Old-and-abbandoned/commit/a047be85247755cdbe0acce6f1dafc8beb84f2ac
     (which is also another argument for modernish's strict checks on the
     number of arguments to its functions!)
  2. It makes syntax colouring in editors work as expected, making
     your code much more readable, which helps to prevent bugs.

* Quote empty string literals with single quotes, e.g. instead of
	var=
  do:
	var=''

* Avoid backticks for command substitution. Use $( ) instead.

* Where possible, use parameter substitution instead of a command
  substitution with echo+sed/awk or similar. It's hundreds of times faster
  and it's got fewer pitfalls.

* Use POSIX shell arithmetic $(( )) instead of an 'expr' command substitution.

* Use of utilities:
  - Use find -exec with + instead of \; unless there's a reason not to.
  - 

* ...
