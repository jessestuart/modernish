[ This document is unfinished and under development. ]

See also CODINGSTYLE.

Design notes for modernish itself:

* Robustness: All modernish library functions must work regardless of:

  - any currently set or unset POSIX shell options, except -e/errexit
  - the state of IFS field splitting
  - the current umask (even if it's 777)
  - the value of PATH (even if /dev/null)
  - spaces, newlines, or weird characters in arguments or file names
  - shell bugs detected & supported by modernish

  Defensive programming is the mantra.

* Security hardening:

  - If any inconsistent program state is detected, modernish must die(),
    invoking the reliable emergency halt that kills the entire program
    including all associated processes, instead of simply exit. This will often
    keep buggy scripts from wreaking havoc.

  - Always test for the correct arguments and die() if an incorrect number
    of arguments is given. This catches any unexpected field splitting and
    globbing (unquoted variables expanding into multiple arguments) which
    strongly indicates that the program is in an insonsistent state.

  - Always validate or sanitise all data before use. Die() on invalid data.
    This prevents injection vulnerabilities and buggy behaviour.

* Dealing with shell bugs:

  - When implementing a shell bug or quirk workaround, either identify it
    in a comment using its modernish ID, for instance:
	[some workaround here]	# BUG_FOOBAR compat
    or, for a conditional workaround, use 'thisshellhas':
	if thisshellhas BUG_FOOBAR; then
		[code including workaround]
	else
		[regular code]
	fi
    This not only allows people reading the code to look up the bug and
    understand what's going on, but also makes it easy to remove the
    workarounds when modernish stops supporting a certain shell bug.
    (The above is good advice for programs using modernish as well!)
       In many cases, the conditional workaround method should be used.
    This is because workaround versions could trigger other bugs in other
    shells that you're not accounting for. If you're not sure, err on the
    side of implementing a conditional workaround.

  - When modernish stops supporting a certain shell bug (e.g. because all
    the shells that have the bug are obsolete), it should be turned into a
    FTL_* fatal bug test executed at init time, unless the test is expensive
    *and* all the shells with that bug already have other fatal bugs.

* Optimise for speed, even if this causes repetitive code.
  Avoid launching subshells like the plague unless there is no alternative
  (command substitution, piping into loops, ( ), all launch subshells).
